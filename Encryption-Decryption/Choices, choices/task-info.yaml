type: edu
custom_name: stage6
files:
- name: test/EncryptDecryptTest.java
  visible: false
  text: |
    import encryptdecrypt.Main;
    import org.hyperskill.hstest.common.FileUtils;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.IOException;
    import java.nio.charset.StandardCharsets;
    import java.nio.file.Files;
    import java.nio.file.NoSuchFileException;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.util.List;

    public class EncryptDecryptTest extends StageTest<String> {
        public EncryptDecryptTest() {
            super(Main.class);
        }

        @Override
        public List<TestCase<String>> generate() {
            return List.of(
                new TestCase<String>()
                    .addArguments(
                        "-alg", "unicode",
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "in.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("\\jqhtrj%yt%m~ujwxpnqq&")
                    .addFile("in.txt", "Welcome to hyperskill!"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "0",
                        "-mode", "enc",
                        "-alg", "unicode",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hello")
                    .addFile("input.txt", "Hello"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "1",
                        "-in", "i.txt",
                        "-alg", "unicode",
                        "-out", "output.txt",
                        "-mode", "enc"
                    )
                    .setAttach("123456789")
                    .addFile("i.txt", "012345678"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-in", "input.txt",
                        "-out", "output.txt",
                        "-alg", "unicode",
                        "-key", "5"
                    )
                    .setAttach("Welcome to hyperskill!")
                    .addFile("input.txt", "\\jqhtrj%yt%m~ujwxpnqq&"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-alg", "unicode",
                        "-key", "0",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hi")
                    .addFile("input.txt", "Hi"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "1",
                        "-in", "input.txt",
                        "-alg", "unicode",
                        "-out", "output.txt"
                    )
                    .setAttach("111122223333")
                    .addFile("input.txt", "222233334444"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("bjqhtrj yt mdujwxpnqq")
                    .addFile("input.txt", "welcome to hyperskill"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("treasure")
                    .addFile("input.txt", "dbokcebo"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "12",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("cphpchdjcijdjibhdjebhjucspucmdmudbnuccup")
                    .addFile("input.txt", "qdvdqvrxqwxrxwpvrxspvxiqgdiqarairpbiqqid"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("y")
                    .addFile("input.txt", "i"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("i")
                    .addFile("input.txt", "y")
            );
        }

        @Override
        public CheckResult check(String reply, String clue) {
            String fileName = "output.txt";
            String output;

            try {
                Path path = Paths.get(FileUtils.CURRENT_DIR + fileName);
                output = Files.readString(path, StandardCharsets.UTF_8);
            } catch (NoSuchFileException e) {
                return new CheckResult(false, "File output.txt not found!");
            } catch (IOException e) {
                return new CheckResult(false, "Cannot read from file!");
            }

            if (!output.trim().equals(clue.trim())) {
                return new CheckResult(false, "Wrong result in the file!");
            }

            return new CheckResult(true);
        }

    }
  learner_created: false
- name: src/encryptdecrypt/Main.java
  visible: true
  text: |
    package encryptdecrypt;

    import java.io.File;
    import java.io.IOException;
    import java.io.PrintStream;
    import java.util.Arrays;
    import java.util.List;
    import java.util.ListIterator;
    import java.util.Scanner;
    import java.util.stream.Collectors;


    enum CryptMode {
        ENC,
        DEC
    }

    class Cipher {
        private final CryptMode mode;
        private final int key;
        private final String data;
        private final String in;
        private final String out;

        private Cipher(CryptMode mode, int key, String data, String in, String out) {
            this.mode = mode;
            this.key = key;
            this.data = data;
            this.in = in;
            this.out = out;
        }

        static Cipher fromArgs(String[] args) {
            CryptMode mode = CryptMode.ENC;
            int key = 0;
            String data = "";
            String in = "";
            String out = "";

            List<String> argsList = Arrays.asList(args);
            ListIterator<String> argsIterator = argsList.listIterator();
            String arg;
            while (argsIterator.hasNext()) {
                arg = argsIterator.next();
                switch (arg) {
                    case "-mode":
                        String modeString = argsIterator.next();
                        switch (modeString) {
                            case "enc":
                            default:
                                mode = CryptMode.ENC;
                                break;
                            case "dec":
                                mode = CryptMode.DEC;
                                break;
                        }
                        break;
                    case "-key":
                        key = Integer.parseInt(argsIterator.next());
                        break;
                    case "-data":
                        data = argsIterator.next();
                        break;
                    case "-in":
                        in = argsIterator.next();
                        break;
                    case "-out":
                        out = argsIterator.next();
                        break;
                }
            }
            return new Cipher(mode, key, data, in, out);
        }

        public void processingData() {
            try (Scanner scanner = data.isEmpty() ?
                    in.isEmpty() ?
                            new Scanner("") :
                            new Scanner(new File(in)) :
                    new Scanner(data);
                 PrintStream output = out.isEmpty() ? System.out : new PrintStream(new File(out))) {
                while (scanner.hasNextLine()) {
                    output.print(processingString(scanner.nextLine()));
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        private int shiftChar(int c, int key) {
            return c + key;
        }

        private String processingString(String data) {
            int shiftCount;
            switch (this.mode) {
                case ENC:
                    shiftCount = this.key;
                    break;
                case DEC:
                    shiftCount = -this.key;
                    break;
                default:
                    shiftCount = 0;
                    break;
            }
            return data.chars()
                    .map(character -> shiftChar(character, shiftCount))
                    .mapToObj(Character::toString)
                    .collect(Collectors.joining(""));
        }
    }

    public class Main {
        public static void main(String[] args) {
            System.out.println(Arrays.asList(args));
            Cipher cipher = Cipher.fromArgs(args);
            cipher.processingData();
        }
    }
  learner_created: true
- name: output.txt
  visible: true
  text: 111122223333
  learner_created: true
- name: src/encryptdecrypt/algorithm/Algorithm.java
  visible: true
  learner_created: true
- name: src/encryptdecrypt/algorithm/AlgorithmType.java
  visible: true
  learner_created: true
- name: src/encryptdecrypt/algorithm/AlgorithmStaticFactory.java
  visible: true
  learner_created: true
- name: src/encryptdecrypt/algorithm/impl/ShiftAlgorithm.java
  visible: true
  learner_created: true
- name: src/encryptdecrypt/algorithm/impl/UnicodeAlgorithm.java
  visible: true
  learner_created: true
- name: src/cipher/Cipher.java
  visible: true
  learner_created: true
- name: src/cipher/CryptMode.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/46/stages/250/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/46/stages/250/implement">JetBrains
    Academy</a>
  time: Thu, 01 Oct 2020 21:18:24 UTC
record: 6
